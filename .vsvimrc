" _vsvimrc

" very good reference config
"https://github.com/keithn/vsvimguide
"https://github.com/vladkovalch/vsvimrc-config

" don't try to be vi compatible
" set nocompatible

" turn on syntax highlighting
" syntax on

" set 4 spaces globally & make indenting sane.
" ... Note that 'set paste' destroys indentation.
"
" we could also set `tabstop`, but let's
" keep tabs 'natural'.
set softtabstop=4 shiftwidth=4 expandtab autoindent

" make vim use the system clipboard
set clipboard=unnamed
" set clipboard+=unnamedplus

" paste from a windows or from vim
" set paste

" visual selection automatically copied to the clipboard       
" set go+=a               


" utf-8!
" set encoding=utf-8 fileencoding=utf-8

" make searching easy, and case insensitive:
set ignorecase smartcase incsearch hlsearch

" map jj to Esc
:inoremap jj <esc>

" map to jump the different windows.
:nnoremap <c-j> <c-w>j
:nnoremap <c-k> <c-w>k
:nnoremap <c-l> <c-w>l
:nnoremap <c-h> <c-w>h

"show the searched results in the middle of the screen
:nnoremap n nzz
:nnoremap N Nzz
:nnoremap * *zz
:nnoremap # #zz

"go to definition
:nnoremap gd <C-]>zz

"gq->== Format codes
:nnoremap gq ==
:vnoremap gq ==

"format code
:nnoremap == :vsc Edit.FormatDocument<CR>

nnoremap gc :vsc Edit.ToggleLineComment<CR>
vnoremap gc :vsc Edit.ToggleLineComment<CR>

" Type %% in command-line mode to refer to the directory of the current file
" cnoremap %% <C-R>=expand("%:h") . "/"<CR>


"https://github.com/VsVim/VsVim/issues/1474
" Surround simulating bindings
nnoremap s) ciw(<C-r>")<Esc>
nnoremap s] ciw[<C-r>"]<Esc>
nnoremap s} ciw{<C-r>"}<Esc>
nnoremap s> ciw<lt><C-r>"><Esc>
nnoremap s" ciw"<C-r>""<Esc>
nnoremap s' ciw'<C-r>"'<Esc>
nnoremap sw) ciW(<C-r>")<Esc>
nnoremap sw] ciW[<C-r>"]<Esc>
nnoremap sw} ciW{<C-r>"}<Esc>
nnoremap sw> ciW<lt><C-r>"><Esc>
nnoremap sw" ciW"<C-r>""<Esc>
nnoremap sw' ciW'<C-r>"'<Esc>

" Surround delete bindings
nnoremap ds) vi(dvhp
nnoremap ds] vi[dvhp
nnoremap ds} vi{dvhp
nnoremap ds> vi<dvhp
nnoremap ds" vi"dvhp
nnoremap ds' vi'dvhp

" Surround change bindings
nnoremap cs"' vi"oh<Esc>msvi"l<Esc>cl'<Esc>`scl'<Esc>
nnoremap cs'" vi'oh<Esc>msvi'l<Esc>cl"<Esc>`scl"<Esc>

" Surround visual selected text
vnoremap S" c"<C-r>""<Esc>
vnoremap S' c"<C-r>"'<Esc>
vnoremap S) c(<C-r>")<Esc>
vnoremap S] c[<C-r>"]<Esc>
vnoremap S} c{<C-r>"}<Esc>
vnoremap S> c<lt><C-r>"><Esc>
vnoremap S* c/*<C-r>"*/<Esc>
"vnoremap St c<lt>div><CR><C-r>"<Esc>
" Surround in div tag and edit tag
vnoremap St c<lt>div><CR><C-r>"<Esc>`<lt>lcw


"set leader
let mapleader = ","

" 'cd' towards the directory in which the current file is edited
nnoremap <leader>cd :cd %:h<CR>

" 'cd' towards the directory in which the current file is edited
" but only change the path for the current window
" nnoremap <leader>cd :lcd %:h<CR>

" open files located in the same dir in with the current file is edited
" nnoremap <leader>ew :e <C-R>=expand("%:.:h") . "/"<CR>

"<CR> => Enter 

"first example
"nnoremap <leader>a :echo "Hello world"<CR>

"editor.action.rename
"Use the VS Refactor function
nmap <leader>rv :vsc Refactor.Rename<CR>

"search in all files
"workbench.action.findInFiles
nmap <leader>gs :vsc Edit.FindinFiles<CR>

"search in the current file
"actions.find
nmap <leader>cs :vsc Edit.Find<CR>

"search in the selected area
vmap <leader>cs :vsc Edit.Find<CR>

"Copy the relative path
"workbench.action.files.copyPathOfActiveFile

"
"copyRelativeFilePath

"
"workbench.action.togglePanel


"like vscode command
"workbench.action.showCommands
nmap <leader>xm :vsc View.CommandWindow<CR>

"swith comments
"editor.action.commentLine
"nmap <leader>ci :vsc Edit.ToggleComment<CR>
"vmap <leader>ci :vsc Edit.ToggleComment<CR>

"extend the selected area
"editor.action.smartSelect.expand
nmap <leader>xx :vsc Edit.ExpandSelection<CR>
vmap <leader>xx :vsc Edit.ExpandSelection<CR>

"shrink the selected area
"editor.action.smartSelect.shrink
nmap <leader>zz :vsc Edit.ContractSelection<CR>
vmap <leader>zz :vsc Edit.ContractSelection<CR>

"open the recent files
"workbench.action.openRecent
nmap <leader>zz :vsc Edit.GoToRecentFile<CR>


"open new windows in the right, and ctrl + w w to switch window
":vsplit
"workbench.action.splitEditorRight

"split
nmap <leader>x1 :vsplit <CR>

"close
nmap <leader>x0 :q <CR>


"go to the solution explorer
nmap <leader>se :vsc View.SolutionExplorer<CR>

"open the folder in the solution explorer
"nmap <leader>of :vsc ProjectandSolutionContextMenus.Project.OpenFolderinFileExplorer<CR>

"ctrl + f6 or Escape
"go back to editor


"gh
map <leader>gh :vsc Edit.QuickInfo<CR>

"gb, try to insert the next matching caret
map <leader>gb :vsc Edit.InsertNextMatchingCaret<CR>


" template
map <leader>. <ESC> /<++><CR>:nohlsearch<CR>c4l

" add var x = 
map <leader>vx ^ivar x = <ESC> bbciw

"
map <leader>gp ^ivar x = new YourObject(); var t = x.GetType(); foreach (var prop in t.GetProperties()) Console.WriteLine( $"x.{prop.Name} = " ); <ESC>

"Json To Chsarp
map <leader>c2j :vsc Edit.PasteJSONAsClasses<CR>

"Add New Class
map <leader>nc :vsc Project.AddClass<CR>

"SurroundWith
map <leader>sr :vsc Edit.SurroundWith<CR>

"ListMembers
map <leader>lm :vsc ListMembers<CR>

"so
nmap <leader>so :so ~/_vsvimrc<CR>

"to string
"nmap <leader>2s viwxistring<Esc>

"to string use extension
nmap <leader>2s viw:vsc Tools.ToString<CR>

"to int use extension
nmap <leader>2i viw:vsc Tools.ToInt<CR>

"to bool
"nmap <leader>2b viwxibool<Esc>

"to bool use extension
nmap <leader>2b viw:vsc Tools.ToBool<CR>

"to float
"nmap <leader>2f viwxifloat<Esc>

"to decimal
"nmap <leader>2d viwxidecimal<Esc>

"to var
"nmap <leader>2v viwxivar<Esc>

"to var use extension
nmap <leader>2v viw:vsc Tools.ToVar<CR>

"to double use extension
nmap <leader>2f viw:vsc Tools.ToDouble<CR>

"toogle true
"nmap <leader>tt viwxitrue<Esc>

"toogle false
"nmap <leader>tf viwxifalse<Esc>

"toogle use extension
nmap <leader>tt viw:vsc Tools.Toggle<CR>

"to mvc url
nmap <leader>2u vi'xi@Url.Content("<C-r>"")

"go to file 
map <leader>gf :vsc Tools.GoToFile<CR>

"select current method
map <leader>vim :vsc Tools.SelectCurrentMethod<CR>

"Move To Method Begin
map <leader>gmb :vsc Tools.MoveToMethodBegin<CR>

"Move To Method End
map <leader>gme :vsc Tools.MoveToMethodEnd<CR>

"postfix completion
map <leader>. :vsc Tools.PostFixVar<CR>

" set the < > 
" set mps+=<:>
