" .vsvimrc

" more editor space
" Enter or Exit Full Screen ( View -> Fullscreen or Shift-Alt-Enter )
" Turn off all toolbars. You will access all the functionality you need through the keyboard
" Unpin all the side / bottom tool windows.
" Turn off sidebar tabs (Window -> Show Sidebar Tabs, or ALT-W b)
" Turn off scrollbars (Tools -> Options -> Text Editor -> All Languages -> Scrollbars)
" Turn on line numbers (Tools -> Options -> Text Editor -> General -> Line Numbers)

" very good reference config
"https://github.com/keithn/vsvimguide
"https://github.com/vladkovalch/vsvimrc-config


" set 4 spaces globally & make indenting sane.
" ... Note that 'set paste' destroys indentation.
"
" we could also set `tabstop`, but let's
" keep tabs 'natural'.
set softtabstop=4 shiftwidth=4 expandtab autoindent

" make vim use the system clipboard
set clipboard=unnamed
" set clipboard+=unnamedplus

" paste from a windows or from vim
" set paste

" utf-8!
" set encoding=utf-8 fileencoding=utf-8

" make searching easy, and case insensitive:
set ignorecase smartcase incsearch hlsearch

" map jj to Esc in Insert mode map.
:inoremap jj <esc>

" map to jump the different windows in Normal mode map.
:nnoremap <c-j> <c-w>j
:nnoremap <c-k> <c-w>k
:nnoremap <c-l> <c-w>l
:nnoremap <c-h> <c-w>h

"show the searched results in the middle of the screen in Normal mode map.
:nnoremap n nzz
:nnoremap N Nzz
:nnoremap * *zz
:nnoremap # #zz

"go to definition
:nnoremap gd <C-]>zz

"format code in Normal, Visual and operator pending mode map.
:noremap == :vsc Edit.FormatDocument<CR>

"toggle comment code in Normal, Visual and operator pending mode map
:noremap gc :vsc Edit.ToggleLineComment<CR>

" Type %% in command-line mode to refer to the directory of the current file
" cnoremap %% <C-R>=expand("%:h") . "/"<CR>


"https://github.com/VsVim/VsVim/issues/1474
" Surround simulating bindings
nnoremap s) ciw(<C-r>")<Esc>
nnoremap s] ciw[<C-r>"]<Esc>
nnoremap s} ciw{<C-r>"}<Esc>
nnoremap s> ciw<lt><C-r>"><Esc>
nnoremap s" ciw"<C-r>""<Esc>
nnoremap s' ciw'<C-r>"'<Esc>
nnoremap sw) ciW(<C-r>")<Esc>
nnoremap sw] ciW[<C-r>"]<Esc>
nnoremap sw} ciW{<C-r>"}<Esc>
nnoremap sw> ciW<lt><C-r>"><Esc>
nnoremap sw" ciW"<C-r>""<Esc>
nnoremap sw' ciW'<C-r>"'<Esc>

" Surround delete bindings
nnoremap ds) vi(dvhp
nnoremap ds] vi[dvhp
nnoremap ds} vi{dvhp
nnoremap ds> vi<dvhp
nnoremap ds" vi"dvhp
nnoremap ds' vi'dvhp

" Surround change bindings
nnoremap cs"' vi"oh<Esc>msvi"l<Esc>cl'<Esc>`scl'<Esc>
nnoremap cs'" vi'oh<Esc>msvi'l<Esc>cl"<Esc>`scl"<Esc>

" Surround visual selected text
vnoremap S" c"<C-r>""<Esc>
vnoremap S' c"<C-r>"'<Esc>
vnoremap S) c(<C-r>")<Esc>
vnoremap S] c[<C-r>"]<Esc>
vnoremap S} c{<C-r>"}<Esc>
vnoremap S> c<lt><C-r>"><Esc>
vnoremap S* c/*<C-r>"*/<Esc>
"vnoremap St c<lt>div><CR><C-r>"<Esc>
" Surround in div tag and edit tag
vnoremap St c<lt>div><CR><C-r>"<Esc>`<lt>lcw


" Sets the leader key
let mapleader="\<Space>"

" Unbinds the Space key as it's used as the leader key
nnoremap <Space> <NOP>

" `Esc` - Remove search highlights
nnoremap <Esc> :nohl<CR>

" `<Alt> + z` - Toggle word wrap
noremap <A-z> :vsc Edit.ToggleWordWrap<CR>

" `<leader> + .` - Append a period to the end of the current line
" `<leader> + ,` - Append a comma to the end of the current line
" `<leader> + ;` - Append a semicolon to the end of the current line
" `<leader> + x` - Delete the last character of the current line
noremap <leader>. :norm A.<CR>
noremap <leader>, :s/\v\s*(,\s*)*$/,/<CR>:nohl<CR>
noremap <leader>; :s/\v\s*(;\s*)*$/;/<CR>:nohl<CR>
noremap <leader>x :s/.\{1}$//<CR>:nohl<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 'cd' towards the directory in which the current file is edited
nnoremap <leader>cd :cd %:h<CR>

" 'cd' towards the directory in which the current file is edited
" but only change the path for the current window
" nnoremap <leader>cd :lcd %:h<CR>

" open files located in the same dir in with the current file is edited
" nnoremap <leader>ew :e <C-R>=expand("%:.:h") . "/"<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" `<leader> + w(indow) + p(in)` - Toggle the pin status of the document
" `<leader> + w(indows) + c(lose) + a(ll)` - Close all unpinned documents
noremap <leader>wp :vsc Window.PinTab<CR>
noremap <leader>wca :vsc Window.CloseAllButPinned<CR>

" `<Alt> + j` - Navigate to the next tab
" `<Alt> + k` - Navigate to the previous tab
" You might want to change these if you prefer horizontal tabs loayout
noremap <A-j> :vsc Window.NextTab<CR>
noremap <A-k> :vsc Window.PreviousTab<CR>
"noremap <A-l> :vsc Window.NextTab<CR>
"noremap <A-h> :vsc Window.PreviousTab<CR>

" `<Alt> + <Enter>` - Show action indicators and action list
" `<Ctrl> + <Space>` - Provide a completion list for partially typed words
noremap <A-CR> :vsc View.QuickActions<CR>
noremap <C-Space> :vsc Edit.CompleteWord<CR>
" ReSharper disabled:
" noremap <A-CR> :vsc ReSharper_AltEnter<CR>
" noremap <C-Space> :vsc Edit.CompleteWord<CR>

" `K` - Show quick information and/or parameter details tooltip
nnoremap K :vsc Edit.QuickInfo<CR>:vsc Edit.ParameterInfo<CR>:execute "normal! K"<CR>

" `]` - Navigate to the next member / type / tag
" `[` - Navigate to the previous member / type / tag
noremap ] :vsc Edit.NextMethod<CR>
noremap [ :vsc Edit.PreviousMethod<CR>
" ReSharper disabled:
" noremap ] :vsc ReSharper.ReSharper_GotoNextMember<CR>
" noremap [ :vsc ReSharper.ReSharper_GotoPrevMember<CR>

" `<Ctrl> + -` - Move backward through navigation history
" `<Ctrl> + =` - Move forward through navigation history
noremap <C>- :vsc View.NavigateBackward<CR>
noremap <C>= :vsc View.NavigateForward<CR>

" Improves navigation when wrapping
" by swapping `j` with `gj` and `k` with `gk`
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k

" `<leader> + d(eclaration)` - Navigate to a declaration of a symbol
" `<leader> + i(mplementation)` - Navigate to implementation of a type or a type member
" `<leader> + u(sage)` - Find usages of any symbol from the solution and referenced assemblies
noremap <leader>d :vsc Edit.GoToDefinition<CR>
noremap <leader>i :vsc Edit.GoToImplementation<CR>
noremap <leader>u :vsc Edit.FindAllReferences<CR>
" ReSharper disabled:
" noremap <leader>d :vsc ReSharper.ReSharper_GotoDeclaration<CR>
" noremap <leader>i :vsc ReSharper.ReSharper_GotoImplementations<CR>
" noremap <leader>u :vsc ReSharper.ReSharper_FindUsages<CR>

" `<leader> + f(ind) + f(iles)` - Search project items or locate a type
" `<leader> + f(ind) + m(ember)` - Navigate to a file member or a textual occurrence
" `<leader> + f(ind) + w(ord)` - Navigate to a text occurrence in code and textual files
" `<leader> + f(ind) + g(boal)` - Search in all files
" `<leader> + f(ind) + c(urrent)` - Search in all files
noremap <leader>ff :vsc Edit.GoToType<CR>
noremap <leader>fm :vsc Edit.GoToMember<CR>
noremap <leader>fw :vsc Edit.GoToAll<CR>
noremap <leader>fg :vsc Edit.FindinFiles<CR>
noremap <leader>fc :vsc Edit.Find<CR>
" ReSharper disabled:
" noremap <leader>ff :vsc ReSharper.ReSharper_GotoType<CR>
" noremap <leader>fm :vsc ReSharper.ReSharper_GotoFileMember<CR>
" noremap <leader>fw :vsc ReSharper.ReSharper_GotoText<CR>

" `<leader> + e(rror)` - Navigate forwards through all issues detected in the current file
" `<leader> + E(rror)` - Navigate backwards through all issues detected in the current file
noremap <leader>e :vsc View.NextError<CR>
noremap <leader>E :vsc View.PreviousError<CR>
" ReSharper disabled:
" noremap <leader>e :vsc ReSharper.ReSharper_GotoNextErrorInSolution<CR>
" noremap <leader>E :vsc ReSharper.ReSharper_GotoPrevErrorInSolution<CR>

" `<leader> + t(est) + r(un)` - Run unit tests from the current context
" `<leader> + t(est) + a(ll)` - Run all the tests in the solution
" `<leader> + t(est) + l(ast)` - Repeat a previous test run
" `<leader> + t(est) + f(ailed)` - Run only previously failed tests
" `<leader> + t(est) + c(over) + a(ll)` - Cover all tests in the solution
" `<leader> + t(est) + d(ebug)` - Start debugging the selected test
" `<leader> + t(set) + s(how) + s(essions)` - Show the unit test sessions window
" `<leader> + t(set) + s(how) + c(overage)` - Show the unit tests coverage results browser
noremap <leader>tr :vsc TestExplorer.RunSelectedTests<CR>
noremap <leader>ta :vsc TestExplorer.RunAllTests<CR>
noremap <leader>tl :vsc TestExplorer.RepeatLastRun<CR>
noremap <leader>tf :vsc TestExplorer.RunFailedTests<CR>
noremap <leader>td :vsc TestExplorer.DebugSelectedTests<CR>
noremap <leader>tss :vsc TestExplorer.ShowTestExplorer<CR>
noremap <leader>tsc :vsc View.CodeCoverageResults<CR>
" ReSharper disabled:
" noremap <leader>tr :vsc ReSharper.ReSharper_UnitTestRunFromContext<CR>
" noremap <leader>ta :vsc ReSharper.ReSharper_UnitTestRunSolution<CR>
" noremap <leader>tl :vsc ReSharper.ReSharper_UnitTestSessionRepeatPreviousRun<CR>
" noremap <leader>tf :vsc TestExplorer.RunFailedTests<CR>
" noremap <leader>tca :vsc ReSharper.ReSharper_CoverAllTestsFromSolution<CR>
" noremap <leader>td :vsc ReSharper.ReSharper_UnitTestDebugContext<CR>
" noremap <leader>tss :vsc ReSharper.ReSharper_ShowUnitTestSessions<CR>
" noremap <leader>tsc :vsc ReSharper.ReSharper_ShowCoverageResultsBrowser<CR>

" `<leader> + b + b(reakpoint)` - Toggle a breakpoint at the current line
" `<leader> + b(reakpoints) + d(isable)` - Disable all breakpoins
" `<leader> + b(reakpoints) + e(nable)` - Enable all breakpoints
" `<leader> + b(reakpoints) + r(emove)` - Remove all breakpoints
" `<leader> + b(reakpoints) + a(ll)` - Show the breakpoints list
noremap <leader>bb :vsc Debug.ToggleBreakpoint<CR>
noremap <leader>bd :vsc Debug.DisableAllBreakpoints<CR>
noremap <leader>be :vsc Debug.EnableAllBreakpoints<CR>
noremap <leader>br :vsc Debug.DeleteAllBreakpoints<CR>
noremap <leader>ba :vsc Debug.Breakpoints<CR>

" `<leader> + s(tart) + b(uild)` - Build the solution
" `<leader> + s(tart) + c(lean)` - Clean the solution
" `<leader> + s(tart) + b(uild)` + s(election) - Build the project that is currently selected
" `<leader> + s(tart) + c(lean)` + s(election) - Clean the project that is currently selected
" `<leader> + s(tart) + d(ebug)` - Start with debugging
" `<leader> + s(tart) + r(un)` - Run without debugging
" `<leader> + s(tarted) + b(uild) + c(ancel)` - Cancel the build
" `<leader> + s(tarted) + d(ebug) + c(ancel)` - Stop debugging
noremap <leader>sb :vsc Build.BuildSolution<CR>
noremap <leader>sc :vsc Build.CleanSolution<CR>
noremap <leader>sbs :vsc Build.BuildSelection<CR>
noremap <leader>scs :vsc Build.CleanSelection<CR>
noremap <leader>sd :vsc Debug.Start<CR>
noremap <leader>sr :vsc Debug.StartWithoutDebugging<CR>
noremap <leader>sbc :vsc Build.Cancel<CR>
noremap <leader>sdc :vsc Debug.StopDebugging<CR>

" `<leader> + q(ick) + w(atch)` - Show the QuickWatch dialog box
" `<Ctrl> + <Left>` - Move execution pointer to the selected statement
" `<Ctrl> + <Right>` - Step over
" `<Ctrl> + <Down>` - Step into
" `<Ctrl> + <Up>` - Step out
nnoremap <Leader>qw :vsc Debug.QuickWatch<CR>
nnoremap <C-Left> :vsc Debug.SetNextStatement<CR>
nnoremap <C-Right> :vsc Debug.StepOver<CR>
nnoremap <C-Down> :vsc Debug.StepInto<CR>
nnoremap <C-Up> :vsc Debug.StepOut<CR>

" `<leader> + /` - Comment/uncomment the current line
noremap <leader>/ :vsc Edit.ToggleLineComment<CR>
" ReSharper disabled:
" noremap <leader>/ :vsc ReSharper.ReSharper_LineComment<CR>

" `<leader> + n(ame) + r(eplace)` - Use the VS Refactor Rename function
nnoremap <leader>nr :vsc Refactor.Rename<CR>

" `<leader> + a(rea) + e(xtend)` - Extend the selected area
" `<leader> + a(rea) + s(hrink)` - Shrink the selected area
noremap <leader>ae :vsc Edit.ExpandSelection<CR>
noremap <leader>as :vsc Edit.ContractSelection<CR>

" `<leader> + r(emove) + s(ort)` - Remove and sort 'usings'
noremap <leader>rs :vsc Edit.RemoveAndSort<CR>

" `<leader> + r(ecent) + f(iles)` - Open the recent files
noremap <leader>rf :vsc Edit.GoToRecentFile<CR>

" `<leader> + g(o) + h(elp)` - Get the quick help
noremap <leader>gh :vsc Edit.QuickInfo<CR>

"gb, try to insert the next matching caret
" map <leader>gb :vsc Edit.InsertNextMatchingCaret<CR>

" `<leader> + g(o) + s(olution)` - Go to the solution explorer
noremap <leader>gs :vsc View.SolutionExplorer<CR>

"Ctrl + F6 or Escape
"go back to editor

"Shift + F7
"toggles back and forth between XAML and Design views

"Right Arrow, extend the folder in the solution explorer
"Left Arrow, shrink the folder in the solution explorer
" * in number pad, extend everything in the solution explorer

"Move To Method Begin
" noremap <leader>gmb :vsc Tools.MoveToMethodBegin<CR>

"Move To Method End
" noremap <leader>gme :vsc Tools.MoveToMethodEnd<CR>


"open the folder in the solution explorer
"nmap <leader>of :vsc ProjectandSolutionContextMenus.Project.OpenFolderinFileExplorer<CR>

"open new windows in the right, and ctrl + w w to switch window
":vsplit
"workbench.action.splitEditorRight

"split
nmap <leader>x1 :vsplit <CR>

"close
nmap <leader>x0 :q <CR>

"like vscode command
"workbench.action.showCommands
" nmap <leader>xm :vsc View.CommandWindow<CR>

" template
" map <leader>. <ESC> /<++><CR>:nohlsearch<CR>c4l

" add var x = 
" map <leader>vx ^ivar x = <ESC> bbciw

"
" map <leader>gp ^ivar x = new YourObject(); var t = x.GetType(); foreach (var prop in t.GetProperties()) Console.WriteLine( $"x.{prop.Name} = " ); <ESC>

"Json To Chsarp
" map <leader>c2j :vsc Edit.PasteJSONAsClasses<CR>

"Add New Class
" map <leader>nc :vsc Project.AddClass<CR>

"SurroundWith
"map <leader>sr :vsc Edit.SurroundWith<CR>

"ListMembers
"map <leader>lm :vsc ListMembers<CR>

"so
"nmap <leader>so :so ~/_vsvimrc<CR>

"to string
"nmap <leader>2s viwxistring<Esc>

"to string use extension
"nmap <leader>2s viw:vsc Tools.ToString<CR>

"to int use extension
"nmap <leader>2i viw:vsc Tools.ToInt<CR>

"to bool
"nmap <leader>2b viwxibool<Esc>

"to bool use extension
"nmap <leader>2b viw:vsc Tools.ToBool<CR>

"to float
"nmap <leader>2f viwxifloat<Esc>

"to decimal
"nmap <leader>2d viwxidecimal<Esc>

"to var
"nmap <leader>2v viwxivar<Esc>

"to var use extension
"nmap <leader>2v viw:vsc Tools.ToVar<CR>

"to double use extension
"nmap <leader>2f viw:vsc Tools.ToDouble<CR>

"toogle true
"nmap <leader>tt viwxitrue<Esc>

"toogle false
"nmap <leader>tf viwxifalse<Esc>

"toogle use extension
"nmap <leader>tt viw:vsc Tools.Toggle<CR>

"to mvc url
"nmap <leader>2u vi'xi@Url.Content("<C-r>"")

"go to file 
"map <leader>gf :vsc Tools.GoToFile<CR>

"select current method
"map <leader>vim :vsc Tools.SelectCurrentMethod<CR>

"postfix completion
"map <leader>. :vsc Tools.PostFixVar<CR>
